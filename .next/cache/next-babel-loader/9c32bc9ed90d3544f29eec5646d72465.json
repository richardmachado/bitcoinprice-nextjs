{"ast":null,"code":"var _jsxFileName = \"D:\\\\Lambda\\\\Next\\\\BITZPRICE\\\\components\\\\LineChart.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styles from \"./LineChart.module.css\";\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoverLoc: null,\n      activePoint: null\n    };\n  } // GET X & Y || MAX & MIN\n\n\n  getX() {\n    const {\n      data\n    } = this.props;\n    return {\n      min: data[0].x,\n      max: data[data.length - 1].x\n    };\n  }\n\n  getY() {\n    const {\n      data\n    } = this.props;\n    return {\n      min: data.reduce((min, p) => p.y < min ? p.y : min, data[0].y),\n      max: data.reduce((max, p) => p.y > max ? p.y : max, data[0].y)\n    };\n  } // GET SVG COORDINATES\n\n\n  getSvgX(x) {\n    const {\n      svgWidth,\n      yLabelSize\n    } = this.props;\n    return yLabelSize + x / this.getX().max * (svgWidth - yLabelSize);\n  }\n\n  getSvgY(y) {\n    const {\n      svgHeight,\n      xLabelSize\n    } = this.props;\n    const gY = this.getY();\n    return ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) / (gY.max - gY.min);\n  } // BUILD SVG PATH\n\n\n  makePath() {\n    const {\n      data,\n      color\n    } = this.props;\n    let pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\n    pathD += data.map((point, i) => {\n      return \"L \" + this.getSvgX(point.x) + \" \" + this.getSvgY(point.y) + \" \";\n    }).join(\"\");\n    return __jsx(\"path\", {\n      className: styles.linechart_path,\n      d: pathD,\n      style: {\n        stroke: color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    });\n  } // BUILD SHADED AREA\n\n\n  makeArea() {\n    const {\n      data\n    } = this.props;\n    let pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\n    pathD += data.map((point, i) => {\n      return \"L \" + this.getSvgX(point.x) + \" \" + this.getSvgY(point.y) + \" \";\n    }).join(\"\");\n    const x = this.getX();\n    const y = this.getY();\n    pathD += \"L \" + this.getSvgX(x.max) + \" \" + this.getSvgY(y.min) + \" \" + \"L \" + this.getSvgX(x.min) + \" \" + this.getSvgY(y.min) + \" \";\n    return __jsx(\"path\", {\n      className: styles.linechart_area,\n      d: pathD,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }\n    });\n  } // BUILD GRID AXIS\n\n\n  makeAxis() {\n    const {\n      yLabelSize\n    } = this.props;\n    const x = this.getX();\n    const y = this.getY();\n    return __jsx(\"g\", {\n      className: styles.linechart_axis,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, __jsx(\"line\", {\n      x1: this.getSvgX(x.min) - yLabelSize,\n      y1: this.getSvgY(y.min),\n      x2: this.getSvgX(x.max),\n      y2: this.getSvgY(y.min),\n      strokeDasharray: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }), __jsx(\"line\", {\n      x1: this.getSvgX(x.min) - yLabelSize,\n      y1: this.getSvgY(y.max),\n      x2: this.getSvgX(x.max),\n      y2: this.getSvgY(y.max),\n      strokeDasharray: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  makeLabels() {\n    const {\n      svgHeight,\n      svgWidth,\n      xLabelSize,\n      yLabelSize\n    } = this.props;\n    const padding = 5;\n    return __jsx(\"g\", {\n      className: styles.linechart_label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      transform: `translate(${yLabelSize / 2}, 20)`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, this.getY().max.toLocaleString('us-EN', {\n      style: 'currency',\n      currency: 'USD'\n    })), __jsx(\"text\", {\n      transform: `translate(${yLabelSize / 2}, ${svgHeight - xLabelSize - padding})`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, this.getY().min.toLocaleString('us-EN', {\n      style: 'currency',\n      currency: 'USD'\n    })), __jsx(\"text\", {\n      transform: `translate(${yLabelSize}, ${svgHeight})`,\n      textAnchor: \"start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, this.props.data[0].d), __jsx(\"text\", {\n      transform: `translate(${svgWidth}, ${svgHeight})`,\n      textAnchor: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, this.props.data[this.props.data.length - 1].d));\n  } // FIND CLOSEST POINT TO MOUSE\n\n\n  getCoords(e) {\n    const {\n      svgWidth,\n      data,\n      yLabelSize\n    } = this.props;\n    const svgLocation = document.getElementsByClassName(\"linechart\")[0].getBoundingClientRect();\n    const adjustment = (svgLocation.width - svgWidth) / 2; //takes padding into consideration\n\n    const relativeLoc = e.clientX - svgLocation.left - adjustment;\n    let svgData = [];\n    data.map((point, i) => {\n      svgData.push({\n        svgX: this.getSvgX(point.x),\n        svgY: this.getSvgY(point.y),\n        d: point.d,\n        p: point.p\n      });\n    });\n    let closestPoint = {};\n\n    for (let i = 0, c = 500; i < svgData.length; i++) {\n      if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\n        closestPoint = svgData[i];\n      }\n    }\n\n    if (relativeLoc - yLabelSize < 0) {\n      this.stopHover();\n    } else {\n      this.setState({\n        hoverLoc: relativeLoc,\n        activePoint: closestPoint\n      });\n      this.props.onChartHover(relativeLoc, closestPoint);\n    }\n  } // STOP HOVER\n\n\n  stopHover() {\n    this.setState({\n      hoverLoc: null,\n      activePoint: null\n    });\n    this.props.onChartHover(null, null);\n  } // MAKE ACTIVE POINT\n\n\n  makeActivePoint() {\n    const {\n      color,\n      pointRadius\n    } = this.props;\n    return __jsx(\"circle\", {\n      className: \"linechart_point\",\n      style: {\n        stroke: color\n      },\n      r: pointRadius,\n      cx: this.state.activePoint.svgX,\n      cy: this.state.activePoint.svgY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    });\n  } // MAKE HOVER LINE\n\n\n  createLine() {\n    const {\n      svgHeight,\n      xLabelSize\n    } = this.props;\n    return __jsx(\"line\", {\n      className: \"hoverLine\",\n      x1: this.state.hoverLoc,\n      y1: -8,\n      x2: this.state.hoverLoc,\n      y2: svgHeight - xLabelSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    });\n  }\n\n  render() {\n    const {\n      svgHeight,\n      svgWidth\n    } = this.props;\n    return __jsx(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      viewBox: `0 0 ${svgWidth} ${svgHeight}`,\n      className: 'linechart',\n      onMouseLeave: () => this.stopHover(),\n      onMouseMove: e => this.getCoords(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, __jsx(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, this.makeAxis(), this.makePath(), this.makeArea(), this.makeLabels(), this.state.hoverLoc ? this.createLine() : null, this.state.hoverLoc ? this.makeActivePoint() : null));\n  }\n\n} // DEFAULT PROPS\n\n\nLineChart.defaultProps = {\n  data: [],\n  color: '#2196F3',\n  pointRadius: 5,\n  svgHeight: 300,\n  svgWidth: 900,\n  xLabelSize: 20,\n  yLabelSize: 80\n};\nexport default LineChart;","map":{"version":3,"sources":["D:/Lambda/Next/BITZPRICE/components/LineChart.js"],"names":["styles","LineChart","React","Component","constructor","props","state","hoverLoc","activePoint","getX","data","min","x","max","length","getY","reduce","p","y","getSvgX","svgWidth","yLabelSize","getSvgY","svgHeight","xLabelSize","gY","makePath","color","pathD","map","point","i","join","linechart_path","stroke","makeArea","linechart_area","makeAxis","linechart_axis","makeLabels","padding","linechart_label","toLocaleString","style","currency","d","getCoords","e","svgLocation","document","getElementsByClassName","getBoundingClientRect","adjustment","width","relativeLoc","clientX","left","svgData","push","svgX","svgY","closestPoint","c","Math","abs","stopHover","setState","onChartHover","makeActivePoint","pointRadius","createLine","render","defaultProps"],"mappings":"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","sourcesContent":["import styles from \"./LineChart.module.css\"\r\n\r\nclass LineChart extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        hoverLoc: null,\r\n        activePoint: null\r\n      }\r\n    }\r\n    // GET X & Y || MAX & MIN\r\n    getX(){\r\n      const {data} = this.props;\r\n      return {\r\n        min: data[0].x,\r\n        max: data[data.length - 1].x\r\n      }\r\n    }\r\n    getY(){\r\n      const {data} = this.props;\r\n      return {\r\n        min: data.reduce((min, p) => p.y < min ? p.y : min, data[0].y),\r\n        max: data.reduce((max, p) => p.y > max ? p.y : max, data[0].y)\r\n      }\r\n    }\r\n    // GET SVG COORDINATES\r\n    getSvgX(x) {\r\n      const {svgWidth, yLabelSize} = this.props;\r\n      return yLabelSize + (x / this.getX().max * (svgWidth - yLabelSize));\r\n    }\r\n    getSvgY(y) {\r\n      const {svgHeight, xLabelSize} = this.props;\r\n      const gY = this.getY();\r\n      return ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) / (gY.max - gY.min);\r\n    }\r\n    // BUILD SVG PATH\r\n    makePath() {\r\n      const {data, color} = this.props;\r\n      let pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\r\n  \r\n      pathD += data.map((point, i) => {\r\n        return \"L \" + this.getSvgX(point.x) + \" \" + this.getSvgY(point.y) + \" \";\r\n      }).join(\"\");\r\n  \r\n      return (\r\n        <path className={styles.linechart_path} d={pathD} style={{stroke: color}} />\r\n      );\r\n    }\r\n    // BUILD SHADED AREA\r\n    makeArea() {\r\n      const {data} = this.props;\r\n      let pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\r\n  \r\n      pathD += data.map((point, i) => {\r\n        return \"L \" + this.getSvgX(point.x) + \" \" + this.getSvgY(point.y) + \" \";\r\n      }).join(\"\");\r\n  \r\n      const x = this.getX();\r\n      const y = this.getY();\r\n      pathD += \"L \" + this.getSvgX(x.max) + \" \" + this.getSvgY(y.min) + \" \"\r\n      + \"L \" + this.getSvgX(x.min) + \" \" + this.getSvgY(y.min) + \" \";\r\n  \r\n      return <path className={styles.linechart_area} d={pathD} />\r\n    }\r\n    // BUILD GRID AXIS\r\n    makeAxis() {\r\n      const {yLabelSize} = this.props;\r\n      const x = this.getX();\r\n      const y = this.getY();\r\n  \r\n      return (\r\n        <g className={styles.linechart_axis}>\r\n          <line\r\n            x1={this.getSvgX(x.min) - yLabelSize} y1={this.getSvgY(y.min)}\r\n            x2={this.getSvgX(x.max)} y2={this.getSvgY(y.min)}\r\n            strokeDasharray=\"5\" />\r\n          <line\r\n            x1={this.getSvgX(x.min) - yLabelSize} y1={this.getSvgY(y.max)}\r\n            x2={this.getSvgX(x.max)} y2={this.getSvgY(y.max)}\r\n            strokeDasharray=\"5\" />\r\n        </g>\r\n      );\r\n    }\r\n    makeLabels(){\r\n      const {svgHeight, svgWidth, xLabelSize, yLabelSize} = this.props;\r\n      const padding = 5;\r\n      return(\r\n        <g className={styles.linechart_label}>\r\n          {/* Y AXIS LABELS */}\r\n          <text transform={`translate(${yLabelSize/2}, 20)`} textAnchor=\"middle\">\r\n            {this.getY().max.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}\r\n          </text>\r\n          <text transform={`translate(${yLabelSize/2}, ${svgHeight - xLabelSize - padding})`} textAnchor=\"middle\">\r\n            {this.getY().min.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}\r\n          </text>\r\n          {/* X AXIS LABELS */}\r\n          <text transform={`translate(${yLabelSize}, ${svgHeight})`} textAnchor=\"start\">\r\n            { this.props.data[0].d }\r\n          </text>\r\n          <text transform={`translate(${svgWidth}, ${svgHeight})`} textAnchor=\"end\">\r\n            { this.props.data[this.props.data.length - 1].d }\r\n          </text>\r\n        </g>\r\n      )\r\n    }\r\n    // FIND CLOSEST POINT TO MOUSE\r\n    getCoords(e){\r\n      const {svgWidth, data, yLabelSize} = this.props;\r\n      const svgLocation = document.getElementsByClassName(\"linechart\")[0].getBoundingClientRect();\r\n      const adjustment = (svgLocation.width - svgWidth) / 2; //takes padding into consideration\r\n      const relativeLoc = e.clientX - svgLocation.left - adjustment;\r\n  \r\n      let svgData = [];\r\n      data.map((point, i) => {\r\n        svgData.push({\r\n          svgX: this.getSvgX(point.x),\r\n          svgY: this.getSvgY(point.y),\r\n          d: point.d,\r\n          p: point.p\r\n        });\r\n      });\r\n  \r\n      let closestPoint = {};\r\n      for(let i = 0, c = 500; i < svgData.length; i++){\r\n        if ( Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c ){\r\n          c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\r\n          closestPoint = svgData[i];\r\n        }\r\n      }\r\n  \r\n      if(relativeLoc - yLabelSize < 0){\r\n        this.stopHover();\r\n      } else {\r\n        this.setState({\r\n          hoverLoc: relativeLoc,\r\n          activePoint: closestPoint\r\n        })\r\n        this.props.onChartHover(relativeLoc, closestPoint);\r\n      }\r\n    }\r\n    // STOP HOVER\r\n    stopHover(){\r\n      this.setState({hoverLoc: null, activePoint: null});\r\n      this.props.onChartHover(null, null);\r\n    }\r\n    // MAKE ACTIVE POINT\r\n    makeActivePoint(){\r\n      const {color, pointRadius} = this.props;\r\n      return (\r\n        <circle\r\n          className='linechart_point'\r\n          style={{stroke: color}}\r\n          r={pointRadius}\r\n          cx={this.state.activePoint.svgX}\r\n          cy={this.state.activePoint.svgY}\r\n        />\r\n      );\r\n    }\r\n    // MAKE HOVER LINE\r\n    createLine(){\r\n      const {svgHeight, xLabelSize} = this.props;\r\n      return (\r\n        <line className='hoverLine'\r\n          x1={this.state.hoverLoc} y1={-8}\r\n          x2={this.state.hoverLoc} y2={svgHeight - xLabelSize} />\r\n      )\r\n    }\r\n  \r\n    render() {\r\n      const {svgHeight, svgWidth} = this.props;\r\n  \r\n      return (\r\n        <svg  width={svgWidth} height={svgHeight} viewBox={`0 0 ${svgWidth} ${svgHeight}`} className={'linechart'}\r\n              onMouseLeave={ () => this.stopHover() }\r\n              onMouseMove={ (e) => this.getCoords(e) } >\r\n          <g>\r\n            {this.makeAxis()}\r\n            {this.makePath()}\r\n            {this.makeArea()}\r\n            {this.makeLabels()}\r\n            {this.state.hoverLoc ? this.createLine() : null}\r\n            {this.state.hoverLoc ? this.makeActivePoint() : null}\r\n          </g>\r\n        </svg>\r\n      );\r\n    }\r\n  }\r\n  // DEFAULT PROPS\r\n  LineChart.defaultProps = {\r\n    data: [],\r\n    color: '#2196F3',\r\n    pointRadius: 5,\r\n    svgHeight: 300,\r\n    svgWidth: 900,\r\n    xLabelSize: 20,\r\n    yLabelSize: 80\r\n  }\r\n  \r\n  export default LineChart;"]},"metadata":{},"sourceType":"module"}