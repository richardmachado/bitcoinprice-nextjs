{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Lambda\\\\Next\\\\BITZPRICE\\\\components\\\\LineChart.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport styles from \"./LineChart.module.css\";\n\nvar LineChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(LineChart, _React$Component);\n\n  var _super = _createSuper(LineChart);\n\n  function LineChart(props) {\n    var _this;\n\n    _classCallCheck(this, LineChart);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      hoverLoc: null,\n      activePoint: null\n    };\n    return _this;\n  } // GET X & Y || MAX & MIN\n\n\n  _createClass(LineChart, [{\n    key: \"getX\",\n    value: function getX() {\n      var data = this.props.data;\n      return {\n        min: data[0].x,\n        max: data[data.length - 1].x\n      };\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      var data = this.props.data;\n      return {\n        min: data.reduce(function (min, p) {\n          return p.y < min ? p.y : min;\n        }, data[0].y),\n        max: data.reduce(function (max, p) {\n          return p.y > max ? p.y : max;\n        }, data[0].y)\n      };\n    } // GET SVG COORDINATES\n\n  }, {\n    key: \"getSvgX\",\n    value: function getSvgX(x) {\n      var _this$props = this.props,\n          svgWidth = _this$props.svgWidth,\n          yLabelSize = _this$props.yLabelSize;\n      return yLabelSize + x / this.getX().max * (svgWidth - yLabelSize);\n    }\n  }, {\n    key: \"getSvgY\",\n    value: function getSvgY(y) {\n      var _this$props2 = this.props,\n          svgHeight = _this$props2.svgHeight,\n          xLabelSize = _this$props2.xLabelSize;\n      var gY = this.getY();\n      return ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) / (gY.max - gY.min);\n    } // BUILD SVG PATH\n\n  }, {\n    key: \"makePath\",\n    value: function makePath() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          data = _this$props3.data,\n          color = _this$props3.color;\n      var pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\n      pathD += data.map(function (point, i) {\n        return \"L \" + _this2.getSvgX(point.x) + \" \" + _this2.getSvgY(point.y) + \" \";\n      }).join(\"\");\n      return __jsx(\"path\", {\n        className: styles.linechart_path,\n        d: pathD,\n        style: {\n          stroke: color\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      });\n    } // BUILD SHADED AREA\n\n  }, {\n    key: \"makeArea\",\n    value: function makeArea() {\n      var _this3 = this;\n\n      var data = this.props.data;\n      var pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\n      pathD += data.map(function (point, i) {\n        return \"L \" + _this3.getSvgX(point.x) + \" \" + _this3.getSvgY(point.y) + \" \";\n      }).join(\"\");\n      var x = this.getX();\n      var y = this.getY();\n      pathD += \"L \" + this.getSvgX(x.max) + \" \" + this.getSvgY(y.min) + \" \" + \"L \" + this.getSvgX(x.min) + \" \" + this.getSvgY(y.min) + \" \";\n      return __jsx(\"path\", {\n        className: styles.linechart_area,\n        d: pathD,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 14\n        }\n      });\n    } // BUILD GRID AXIS\n\n  }, {\n    key: \"makeAxis\",\n    value: function makeAxis() {\n      var yLabelSize = this.props.yLabelSize;\n      var x = this.getX();\n      var y = this.getY();\n      return __jsx(\"g\", {\n        className: styles.linechart_axis,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, __jsx(\"line\", {\n        x1: this.getSvgX(x.min) - yLabelSize,\n        y1: this.getSvgY(y.min),\n        x2: this.getSvgX(x.max),\n        y2: this.getSvgY(y.min),\n        strokeDasharray: \"5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }), __jsx(\"line\", {\n        x1: this.getSvgX(x.min) - yLabelSize,\n        y1: this.getSvgY(y.max),\n        x2: this.getSvgX(x.max),\n        y2: this.getSvgY(y.max),\n        strokeDasharray: \"5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }));\n    }\n  }, {\n    key: \"makeLabels\",\n    value: function makeLabels() {\n      var _this$props4 = this.props,\n          svgHeight = _this$props4.svgHeight,\n          svgWidth = _this$props4.svgWidth,\n          xLabelSize = _this$props4.xLabelSize,\n          yLabelSize = _this$props4.yLabelSize;\n      var padding = 5;\n      return __jsx(\"g\", {\n        className: styles.linechart_label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }\n      }, __jsx(\"text\", {\n        transform: \"translate(\".concat(yLabelSize / 2, \", 20)\"),\n        textAnchor: \"middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, this.getY().max.toLocaleString('us-EN', {\n        style: 'currency',\n        currency: 'USD'\n      })), __jsx(\"text\", {\n        transform: \"translate(\".concat(yLabelSize / 2, \", \").concat(svgHeight - xLabelSize - padding, \")\"),\n        textAnchor: \"middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, this.getY().min.toLocaleString('us-EN', {\n        style: 'currency',\n        currency: 'USD'\n      })), __jsx(\"text\", {\n        transform: \"translate(\".concat(yLabelSize, \", \").concat(svgHeight, \")\"),\n        textAnchor: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, this.props.data[0].d), __jsx(\"text\", {\n        transform: \"translate(\".concat(svgWidth, \", \").concat(svgHeight, \")\"),\n        textAnchor: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, this.props.data[this.props.data.length - 1].d));\n    } // FIND CLOSEST POINT TO MOUSE\n\n  }, {\n    key: \"getCoords\",\n    value: function getCoords(e) {\n      var _this4 = this;\n\n      var _this$props5 = this.props,\n          svgWidth = _this$props5.svgWidth,\n          data = _this$props5.data,\n          yLabelSize = _this$props5.yLabelSize;\n      var svgLocation = document.getElementsByClassName(\"linechart\")[0].getBoundingClientRect();\n      var adjustment = (svgLocation.width - svgWidth) / 2; //takes padding into consideration\n\n      var relativeLoc = e.clientX - svgLocation.left - adjustment;\n      var svgData = [];\n      data.map(function (point, i) {\n        svgData.push({\n          svgX: _this4.getSvgX(point.x),\n          svgY: _this4.getSvgY(point.y),\n          d: point.d,\n          p: point.p\n        });\n      });\n      var closestPoint = {};\n\n      for (var i = 0, c = 500; i < svgData.length; i++) {\n        if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\n          c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\n          closestPoint = svgData[i];\n        }\n      }\n\n      if (relativeLoc - yLabelSize < 0) {\n        this.stopHover();\n      } else {\n        this.setState({\n          hoverLoc: relativeLoc,\n          activePoint: closestPoint\n        });\n        this.props.onChartHover(relativeLoc, closestPoint);\n      }\n    } // STOP HOVER\n\n  }, {\n    key: \"stopHover\",\n    value: function stopHover() {\n      this.setState({\n        hoverLoc: null,\n        activePoint: null\n      });\n      this.props.onChartHover(null, null);\n    } // MAKE ACTIVE POINT\n\n  }, {\n    key: \"makeActivePoint\",\n    value: function makeActivePoint() {\n      var _this$props6 = this.props,\n          color = _this$props6.color,\n          pointRadius = _this$props6.pointRadius;\n      return __jsx(\"circle\", {\n        className: styles.linechart_point,\n        style: {\n          stroke: color\n        },\n        r: pointRadius,\n        cx: this.state.activePoint.svgX,\n        cy: this.state.activePoint.svgY,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }\n      });\n    } // MAKE HOVER LINE\n\n  }, {\n    key: \"createLine\",\n    value: function createLine() {\n      var _this$props7 = this.props,\n          svgHeight = _this$props7.svgHeight,\n          xLabelSize = _this$props7.xLabelSize;\n      return __jsx(\"line\", {\n        className: styles.hoverLine,\n        x1: this.state.hoverLoc,\n        y1: -8,\n        x2: this.state.hoverLoc,\n        y2: svgHeight - xLabelSize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$props8 = this.props,\n          svgHeight = _this$props8.svgHeight,\n          svgWidth = _this$props8.svgWidth;\n      return __jsx(\"svg\", {\n        width: svgWidth,\n        height: svgHeight,\n        viewBox: \"0 0 \".concat(svgWidth, \" \").concat(svgHeight),\n        className: \"linechart\",\n        onMouseLeave: function onMouseLeave() {\n          return _this5.stopHover();\n        },\n        onMouseMove: function onMouseMove(e) {\n          return _this5.getCoords(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }\n      }, __jsx(\"g\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      }, this.makeAxis(), this.makePath(), this.makeArea(), this.makeLabels(), this.state.hoverLoc ? this.createLine() : null, this.state.hoverLoc ? this.makeActivePoint() : null));\n    }\n  }]);\n\n  return LineChart;\n}(React.Component); // DEFAULT PROPS\n\n\nLineChart.defaultProps = {\n  data: [],\n  color: '#2196F3',\n  pointRadius: 5,\n  svgHeight: 300,\n  svgWidth: 900,\n  xLabelSize: 20,\n  yLabelSize: 80\n};\nexport default LineChart;","map":{"version":3,"sources":["D:/Lambda/Next/BITZPRICE/components/LineChart.js"],"names":["styles","LineChart","props","state","hoverLoc","activePoint","data","min","x","max","length","reduce","p","y","svgWidth","yLabelSize","getX","svgHeight","xLabelSize","gY","getY","color","pathD","getSvgX","getSvgY","map","point","i","join","linechart_path","stroke","linechart_area","linechart_axis","padding","linechart_label","toLocaleString","style","currency","d","e","svgLocation","document","getElementsByClassName","getBoundingClientRect","adjustment","width","relativeLoc","clientX","left","svgData","push","svgX","svgY","closestPoint","c","Math","abs","stopHover","setState","onChartHover","pointRadius","linechart_point","hoverLine","getCoords","makeAxis","makePath","makeArea","makeLabels","createLine","makeActivePoint","React","Component","defaultProps"],"mappings":"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","sourcesContent":["import styles from \"./LineChart.module.css\"\r\n\r\nclass LineChart extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        hoverLoc: null,\r\n        activePoint: null\r\n      }\r\n    }\r\n    // GET X & Y || MAX & MIN\r\n    getX(){\r\n      const {data} = this.props;\r\n      return {\r\n        min: data[0].x,\r\n        max: data[data.length - 1].x\r\n      }\r\n    }\r\n    getY(){\r\n      const {data} = this.props;\r\n      return {\r\n        min: data.reduce((min, p) => p.y < min ? p.y : min, data[0].y),\r\n        max: data.reduce((max, p) => p.y > max ? p.y : max, data[0].y)\r\n      }\r\n    }\r\n    // GET SVG COORDINATES\r\n    getSvgX(x) {\r\n      const {svgWidth, yLabelSize} = this.props;\r\n      return yLabelSize + (x / this.getX().max * (svgWidth - yLabelSize));\r\n    }\r\n    getSvgY(y) {\r\n      const {svgHeight, xLabelSize} = this.props;\r\n      const gY = this.getY();\r\n      return ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) / (gY.max - gY.min);\r\n    }\r\n    // BUILD SVG PATH\r\n    makePath() {\r\n      const {data, color} = this.props;\r\n      let pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\r\n  \r\n      pathD += data.map((point, i) => {\r\n        return \"L \" + this.getSvgX(point.x) + \" \" + this.getSvgY(point.y) + \" \";\r\n      }).join(\"\");\r\n  \r\n      return (\r\n        <path className={styles.linechart_path} d={pathD} style={{stroke: color}} />\r\n      );\r\n    }\r\n    // BUILD SHADED AREA\r\n    makeArea() {\r\n      const {data} = this.props;\r\n      let pathD = \"M \" + this.getSvgX(data[0].x) + \" \" + this.getSvgY(data[0].y) + \" \";\r\n  \r\n      pathD += data.map((point, i) => {\r\n        return \"L \" + this.getSvgX(point.x) + \" \" + this.getSvgY(point.y) + \" \";\r\n      }).join(\"\");\r\n  \r\n      const x = this.getX();\r\n      const y = this.getY();\r\n      pathD += \"L \" + this.getSvgX(x.max) + \" \" + this.getSvgY(y.min) + \" \"\r\n      + \"L \" + this.getSvgX(x.min) + \" \" + this.getSvgY(y.min) + \" \";\r\n  \r\n      return <path className={styles.linechart_area} d={pathD} />\r\n    }\r\n    // BUILD GRID AXIS\r\n    makeAxis() {\r\n      const {yLabelSize} = this.props;\r\n      const x = this.getX();\r\n      const y = this.getY();\r\n  \r\n      return (\r\n        <g className={styles.linechart_axis}>\r\n          <line\r\n            x1={this.getSvgX(x.min) - yLabelSize} y1={this.getSvgY(y.min)}\r\n            x2={this.getSvgX(x.max)} y2={this.getSvgY(y.min)}\r\n            strokeDasharray=\"5\" />\r\n          <line\r\n            x1={this.getSvgX(x.min) - yLabelSize} y1={this.getSvgY(y.max)}\r\n            x2={this.getSvgX(x.max)} y2={this.getSvgY(y.max)}\r\n            strokeDasharray=\"5\" />\r\n        </g>\r\n      );\r\n    }\r\n    makeLabels(){\r\n      const {svgHeight, svgWidth, xLabelSize, yLabelSize} = this.props;\r\n      const padding = 5;\r\n      return(\r\n        <g className={styles.linechart_label}>\r\n          {/* Y AXIS LABELS */}\r\n          <text transform={`translate(${yLabelSize/2}, 20)`} textAnchor=\"middle\">\r\n            {this.getY().max.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}\r\n          </text>\r\n          <text transform={`translate(${yLabelSize/2}, ${svgHeight - xLabelSize - padding})`} textAnchor=\"middle\">\r\n            {this.getY().min.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}\r\n          </text>\r\n          {/* X AXIS LABELS */}\r\n          <text transform={`translate(${yLabelSize}, ${svgHeight})`} textAnchor=\"start\">\r\n            { this.props.data[0].d }\r\n          </text>\r\n          <text transform={`translate(${svgWidth}, ${svgHeight})`} textAnchor=\"end\">\r\n            { this.props.data[this.props.data.length - 1].d }\r\n          </text>\r\n        </g>\r\n      )\r\n    }\r\n    // FIND CLOSEST POINT TO MOUSE\r\n    getCoords(e){\r\n      const {svgWidth, data, yLabelSize} = this.props;\r\n      const svgLocation = document.getElementsByClassName(\"linechart\")[0].getBoundingClientRect();\r\n      const adjustment = (svgLocation.width - svgWidth) / 2; //takes padding into consideration\r\n      const relativeLoc = e.clientX - svgLocation.left - adjustment;\r\n  \r\n      let svgData = [];\r\n      data.map((point, i) => {\r\n        svgData.push({\r\n          svgX: this.getSvgX(point.x),\r\n          svgY: this.getSvgY(point.y),\r\n          d: point.d,\r\n          p: point.p\r\n        });\r\n      });\r\n  \r\n      let closestPoint = {};\r\n      for(let i = 0, c = 500; i < svgData.length; i++){\r\n        if ( Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c ){\r\n          c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\r\n          closestPoint = svgData[i];\r\n        }\r\n      }\r\n  \r\n      if(relativeLoc - yLabelSize < 0){\r\n        this.stopHover();\r\n      } else {\r\n        this.setState({\r\n          hoverLoc: relativeLoc,\r\n          activePoint: closestPoint\r\n        })\r\n        this.props.onChartHover(relativeLoc, closestPoint);\r\n      }\r\n    }\r\n    // STOP HOVER\r\n    stopHover(){\r\n      this.setState({hoverLoc: null, activePoint: null});\r\n      this.props.onChartHover(null, null);\r\n    }\r\n    // MAKE ACTIVE POINT\r\n    makeActivePoint(){\r\n      const {color, pointRadius} = this.props;\r\n      return (\r\n        <circle\r\n          className={styles.linechart_point}\r\n          style={{stroke: color}}\r\n          r={pointRadius}\r\n          cx={this.state.activePoint.svgX}\r\n          cy={this.state.activePoint.svgY}\r\n        />\r\n      );\r\n    }\r\n    // MAKE HOVER LINE\r\n    createLine(){\r\n      const {svgHeight, xLabelSize} = this.props;\r\n      return (\r\n        <line className={styles.hoverLine}\r\n          x1={this.state.hoverLoc} y1={-8}\r\n          x2={this.state.hoverLoc} y2={svgHeight - xLabelSize} />\r\n      )\r\n    }\r\n  \r\n    render() {\r\n        const { svgHeight, svgWidth } = this.props;\r\n  \r\n        return (\r\n            <svg width={svgWidth} height={svgHeight} viewBox={`0 0 ${svgWidth} ${svgHeight}`} className='linechart' \r\n              onMouseLeave={ () => this.stopHover() }\r\n              onMouseMove={ (e) => this.getCoords(e) } >\r\n          <g>\r\n            {this.makeAxis()}\r\n            {this.makePath()}\r\n            {this.makeArea()}\r\n            {this.makeLabels()}\r\n            {this.state.hoverLoc ? this.createLine() : null}\r\n            {this.state.hoverLoc ? this.makeActivePoint() : null}\r\n          </g>\r\n        </svg>\r\n      );\r\n    }\r\n  }\r\n  // DEFAULT PROPS\r\n  LineChart.defaultProps = {\r\n    data: [],\r\n    color: '#2196F3',\r\n    pointRadius: 5,\r\n    svgHeight: 300,\r\n    svgWidth: 900,\r\n    xLabelSize: 20,\r\n    yLabelSize: 80\r\n  }\r\n  \r\n  export default LineChart;"]},"metadata":{},"sourceType":"module"}